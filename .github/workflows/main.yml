name: Branch Promotion Pipeline

on:
  push:
    branches:
      - test              # Step 1: App team pushes to TEST → kicks off full chain

permissions:
  contents: write         # allow CI to push between branches

env:
  SSH_KEY: /home/azure/.ssh/airflow_deploy_key
  SSH_USER: airflow
  DEV_HOST: 20.1.156.227
  QA_HOST: 20.41.12.28
  PROD_HOST: 20.57.59.31
  REMOTE_DIR: /app        # target dir on all servers

jobs:
  # Step 2: TEST → DEV
  promote-test-to-dev: 
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Promote test → dev (auto-create branch, prefer TEST on conflicts)
        env:
          SOURCE_BRANCH: test
          TARGET_BRANCH: dev
        run: |
          set -e
          git config user.name "ci-bot"
          git config user.email "ci-bot@example.com"

          git fetch origin
          if git show-ref --verify --quiet refs/heads/$TARGET_BRANCH; then
            git checkout $TARGET_BRANCH
          else
            git checkout -b $TARGET_BRANCH
          fi

          git pull origin $TARGET_BRANCH || true
          # Always take SOURCE branch on conflicts
          git merge -X theirs origin/$SOURCE_BRANCH -m "Promote $SOURCE_BRANCH → $TARGET_BRANCH" || true
          git push --force-with-lease origin $TARGET_BRANCH

  # Step 3: Sync DEV + validate
  sync-dev:
    runs-on: self-hosted
    needs: promote-test-to-dev
    steps:
      - uses: actions/checkout@v4
        with: { ref: dev }

      - name: Upload to DEV via SFTP
        run: |
          set -e
          # ensure remote dir exists, then upload
          ssh -i "$SSH_KEY" -o StrictHostKeyChecking=no $SSH_USER@$DEV_HOST "mkdir -p $REMOTE_DIR"
          # Use SFTP in batch mode (upload everything from repo root)
          sftp -i "$SSH_KEY" -o StrictHostKeyChecking=no $SSH_USER@$DEV_HOST <<EOF
          put -r * $REMOTE_DIR/
          bye
          EOF

      - name: Validate on DEV
        run: |
          set -e
          ssh -i "$SSH_KEY" -o StrictHostKeyChecking=no $SSH_USER@$DEV_HOST "test -d $REMOTE_DIR && ls -la $REMOTE_DIR | head -n 50 && [ \$(find $REMOTE_DIR -maxdepth 1 -type f | wc -l) -ge 1 ]"

  # Step 4: DEV → QA
  promote-dev-to-qa:
    runs-on: self-hosted
    needs: sync-dev
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Promote dev → qa (auto-create branch, prefer DEV on conflicts)
        env:
          SOURCE_BRANCH: dev
          TARGET_BRANCH: qa
        run: |
          set -e
          git config user.name "ci-bot"
          git config user.email "ci-bot@example.com"

          git fetch origin
          if git show-ref --verify --quiet refs/heads/$TARGET_BRANCH; then
            git checkout $TARGET_BRANCH
          else
            git checkout -b $TARGET_BRANCH
          fi

          git pull origin $TARGET_BRANCH || true
          git merge -X theirs origin/$SOURCE_BRANCH -m "Promote $SOURCE_BRANCH → $TARGET_BRANCH" || true
          git push --force-with-lease origin $TARGET_BRANCH

  # Step 5: Sync QA + validate
  sync-qa:
    runs-on: self-hosted
    needs: promote-dev-to-qa
    steps:
      - uses: actions/checkout@v4
        with: { ref: qa }

      - name: Upload to QA via SFTP
        run: |
          set -e
          ssh -i "$SSH_KEY" -o StrictHostKeyChecking=no $SSH_USER@$QA_HOST "mkdir -p $REMOTE_DIR"
          sftp -i "$SSH_KEY" -o StrictHostKeyChecking=no $SSH_USER@$QA_HOST <<EOF
          put -r * $REMOTE_DIR/
          bye
          EOF

      - name: Validate on QA
        run: |
          set -e
          ssh -i "$SSH_KEY" -o StrictHostKeyChecking=no $SSH_USER@$QA_HOST "test -d $REMOTE_DIR && ls -la $REMOTE_DIR | head -n 50 && [ \$(find $REMOTE_DIR -maxdepth 1 -type f | wc -l) -ge 1 ]"

  # --- Manual approval gate for PROD starts here ---
  # Step 6: QA → PROD (needs approval via Environment)
  promote-qa-to-prod:
    runs-on: self-hosted
    needs: sync-qa
    environment: production   # configure this environment with required reviewers (NOC)
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Promote qa → prod (auto-create branch, prefer QA on conflicts)
        env:
          SOURCE_BRANCH: qa
          TARGET_BRANCH: prod
        run: |
          set -e
          git config user.name "ci-bot"
          git config user.email "ci-bot@example.com"

          git fetch origin
          if git show-ref --verify --quiet refs/heads/$TARGET_BRANCH; then
            git checkout $TARGET_BRANCH
          else
            git checkout -b $TARGET_BRANCH
          fi

          git pull origin $TARGET_BRANCH || true
          git merge -X theirs origin/$SOURCE_BRANCH -m "Promote $SOURCE_BRANCH → $TARGET_BRANCH" || true
          git push --force-with-lease origin $TARGET_BRANCH

  # Step 7: Notify NOC
  notify-noc:
    runs-on: self-hosted
    needs: promote-qa-to-prod
    steps:
      - name: Notify NOC
        run: |
          echo "✅ QA → PROD promotion complete for branch 'prod'."
          echo "🧑‍💻 NOC can now approve and run PROD sync (next job uses 'production' environment too)."
          # (Optional) Add Slack/Teams/email webhook call here.

  # Step 8: NOC approves & syncs PROD (gated by the same 'production' environment)
  sync-prod:
    runs-on: self-hosted
    needs: notify-noc
    environment: production   # approval here gives NOC the ability to run PROD sync
    steps:
      - uses: actions/checkout@v4
        with: { ref: prod }

      - name: Upload to PROD via SFTP
        run: |
          set -e
          ssh -i "$SSH_KEY" -o StrictHostKeyChecking=no $SSH_USER@$PROD_HOST "mkdir -p $REMOTE_DIR"
          sftp -i "$SSH_KEY" -o StrictHostKeyChecking=no $SSH_USER@$PROD_HOST <<EOF
          put -r * $REMOTE_DIR/
          bye
          EOF

      - name: Validate on PROD
        run: |
          set -e
          ssh -i "$SSH_KEY" -o StrictHostKeyChecking=no $SSH_USER@$PROD_HOST "test -d $REMOTE_DIR && ls -la $REMOTE_DIR | head -n 50 && [ \$(find $REMOTE_DIR -maxdepth 1 -type f | wc -l) -ge 1 ]"
