name: Branch Promotion Pipeline

on:
  push:
    branches:
      - test            # Step 1: App team commits to TEST â†’ kicks off whole chain

permissions:
  contents: write       # allow CI to push updated branches

env:
  SSH_USER: airflow
  DEV_HOST: 20.1.156.227
  QA_HOST: 20.41.12.28
  PROD_HOST: 20.57.59.31
  REMOTE_DIR: /app
  PK_PATH: ~/.ssh/airflow_deploy_key
  PACKAGE_NAME: app_deploy.tgz

jobs:
  # -------- Step 2: TEST â†’ DEV --------
  promote-test-to-dev:
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Setup SSH key (from secret)
        run: |
          set -e
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > "$PK_PATH"
          chmod 600 "$PK_PATH"

      - name: Promote test â†’ dev (auto-create, prefer TEST on conflicts)
        env:
          SOURCE_BRANCH: test
          TARGET_BRANCH: dev
        run: |
          set -e
          git config user.name "ci-bot"
          git config user.email "ci-bot@example.com"

          git fetch origin
          if git show-ref --verify --quiet refs/heads/$TARGET_BRANCH; then
            git checkout $TARGET_BRANCH
          else
            git checkout -b $TARGET_BRANCH
          fi

          git pull origin $TARGET_BRANCH || true
          git merge -X theirs origin/$SOURCE_BRANCH -m "Promote $SOURCE_BRANCH â†’ $TARGET_BRANCH" || true
          git push --force-with-lease origin $TARGET_BRANCH

  # -------- Step 3: Sync DEV + validate --------
  sync-dev:
    runs-on: self-hosted
    needs: promote-test-to-dev
    steps:
      - uses: actions/checkout@v4
        with: { ref: dev }

      - name: Setup SSH key (from secret)
        run: |
          set -e
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > "$PK_PATH"
          chmod 600 "$PK_PATH"

      - name: Package repo (exclude VCS/CI files)
        run: |
          set -e
          tar --exclude=.git --exclude=.github -czf "$PACKAGE_NAME" .

      - name: Upload + extract to DEV via SFTP/SSH
        env:
          HOST: ${{ env.DEV_HOST }}
        run: |
          set -e
          # ensure remote dir exists
          ssh -i "$PK_PATH" -o StrictHostKeyChecking=no $SSH_USER@$HOST "mkdir -p $REMOTE_DIR"
          # upload package
          sftp -i "$PK_PATH" -o StrictHostKeyChecking=no $SSH_USER@$HOST <<EOF
          put $PACKAGE_NAME /tmp/$PACKAGE_NAME
          bye
          EOF
          # extract
          ssh -i "$PK_PATH" -o StrictHostKeyChecking=no $SSH_USER@$HOST "tar -xzf /tmp/$PACKAGE_NAME -C $REMOTE_DIR && rm -f /tmp/$PACKAGE_NAME"

      - name: Validate on DEV
        env:
          HOST: ${{ env.DEV_HOST }}
        run: |
          set -e
          ssh -i "$PK_PATH" -o StrictHostKeyChecking=no $SSH_USER@$HOST \
            "test -d $REMOTE_DIR && ls -la $REMOTE_DIR | head -n 50 && [ \$(find $REMOTE_DIR -maxdepth 1 -type f | wc -l) -ge 1 ]"

  # -------- Step 4: DEV â†’ QA --------
  promote-dev-to-qa:
    runs-on: self-hosted
    needs: sync-dev
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Setup SSH key (from secret)
        run: |
          set -e
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > "$PK_PATH"
          chmod 600 "$PK_PATH"

      - name: Promote dev â†’ qa (auto-create, prefer DEV on conflicts)
        env:
          SOURCE_BRANCH: dev
          TARGET_BRANCH: qa
        run: |
          set -e
          git config user.name "ci-bot"
          git config user.email "ci-bot@example.com"

          git fetch origin
          if git show-ref --verify --quiet refs/heads/$TARGET_BRANCH; then
            git checkout $TARGET_BRANCH
          else
            git checkout -b $TARGET_BRANCH
          fi

          git pull origin $TARGET_BRANCH || true
          git merge -X theirs origin/$SOURCE_BRANCH -m "Promote $SOURCE_BRANCH â†’ $TARGET_BRANCH" || true
          git push --force-with-lease origin $TARGET_BRANCH

  # -------- Step 5: Sync QA + validate --------
  sync-qa:
    runs-on: self-hosted
    needs: promote-dev-to-qa
    steps:
      - uses: actions/checkout@v4
        with: { ref: qa }

      - name: Setup SSH key (from secret)
        run: |
          set -e
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > "$PK_PATH"
          chmod 600 "$PK_PATH"

      - name: Package repo (exclude VCS/CI files)
        run: |
          set -e
          tar --exclude=.git --exclude=.github -czf "$PACKAGE_NAME" .

      - name: Upload + extract to QA via SFTP/SSH
        env:
          HOST: ${{ env.QA_HOST }}
        run: |
          set -e
          ssh -i "$PK_PATH" -o StrictHostKeyChecking=no $SSH_USER@$HOST "mkdir -p $REMOTE_DIR"
          sftp -i "$PK_PATH" -o StrictHostKeyChecking=no $SSH_USER@$HOST <<EOF
          put $PACKAGE_NAME /tmp/$PACKAGE_NAME
          bye
          EOF
          ssh -i "$PK_PATH" -o StrictHostKeyChecking=no $SSH_USER@$HOST "tar -xzf /tmp/$PACKAGE_NAME -C $REMOTE_DIR && rm -f /tmp/$PACKAGE_NAME"

      - name: Validate on QA
        env:
          HOST: ${{ env.QA_HOST }}
        run: |
          set -e
          ssh -i "$PK_PATH" -o StrictHostKeyChecking=no $SSH_USER@$HOST \
            "test -d $REMOTE_DIR && ls -la $REMOTE_DIR | head -n 50 && [ \$(find $REMOTE_DIR -maxdepth 1 -type f | wc -l) -ge 1 ]"

  # -------- Step 6: QA â†’ PROD (approval required) --------
  promote-qa-to-prod:
    runs-on: self-hosted
    needs: sync-qa
    environment: production   # NOC approval gate
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Promote qa â†’ prod (auto-create, prefer QA on conflicts)
        env:
          SOURCE_BRANCH: qa
          TARGET_BRANCH: prod
        run: |
          set -e
          git config user.name "ci-bot"
          git config user.email "ci-bot@example.com"

          git fetch origin
          if git show-ref --verify --quiet refs/heads/$TARGET_BRANCH; then
            git checkout $TARGET_BRANCH
          else
            git checkout -b $TARGET_BRANCH
          fi

          git pull origin $TARGET_BRANCH || true
          git merge -X theirs origin/$SOURCE_BRANCH -m "Promote $SOURCE_BRANCH â†’ $TARGET_BRANCH" || true
          git push --force-with-lease origin $TARGET_BRANCH

  # -------- Step 7: Notify NOC --------
  notify-noc:
    runs-on: self-hosted
    needs: promote-qa-to-prod
    steps:
      - name: Notify NOC
        run: |
          echo "âœ… QA â†’ PROD promotion completed for branch 'prod'."
          echo "ðŸ›‘ PROD sync will run after NOC approves the next job (production environment)."
          # Optionally call Slack/Teams/Email webhook here.

  # -------- Step 8: NOC approves & syncs PROD --------
  sync-prod:
    runs-on: self-hosted
    needs: notify-noc
    environment: production   # NOC approval (same env gate)
    steps:
      - uses: actions/checkout@v4
        with: { ref: prod }

      - name: Setup SSH key (from secret)
        run: |
          set -e
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > "$PK_PATH"
          chmod 600 "$PK_PATH"

      - name: Package repo (exclude VCS/CI files)
        run: |
          set -e
          tar --exclude=.git --exclude=.github -czf "$PACKAGE_NAME" .

      - name: Upload + extract to PROD via SFTP/SSH
        env:
          HOST: ${{ env.PROD_HOST }}
        run: |
          set -e
          ssh -i "$PK_PATH" -o StrictHostKeyChecking=no $SSH_USER@$HOST "mkdir -p $REMOTE_DIR"
          sftp -i "$PK_PATH" -o StrictHostKeyChecking=no $SSH_USER@$HOST <<EOF
          put $PACKAGE_NAME /tmp/$PACKAGE_NAME
          bye
          EOF
          ssh -i "$PK_PATH" -o StrictHostKeyChecking=no $SSH_USER@$HOST "tar -xzf /tmp/$PACKAGE_NAME -C $REMOTE_DIR && rm -f /tmp/$PACKAGE_NAME"

      - name: Validate on PROD
        env:
          HOST: ${{ env.PROD_HOST }}
        run: |
          set -e
          ssh -i "$PK_PATH" -o StrictHostKeyChecking=no $SSH_USER@$HOST \
            "test -d $REMOTE_DIR && ls -la $REMOTE_DIR | head -n 50 && [ \$(find $REMOTE_DIR -maxdepth 1 -type f | wc -l) -ge 1 ]"
